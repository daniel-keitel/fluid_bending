#version 460 core
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference_uvec2 : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_debug_printf : enable //debugPrintfEXT

#include "util.glsl"
#include "functions/4dnoise.glsl"

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout (std430, set = 0, binding = 0) uniform UniformBuffer {
    uniform_data uni;
};

layout (std140, set = 1, binding = 0) uniform ComputeUniformBuffer {
    compute_uniform_data cUni;
};

layout (scalar, set = 1, binding = 2) restrict writeonly buffer DensityBuffer{
    float densities[];
};

layout (scalar, set = 1, binding = 3) restrict writeonly buffer SharedBuffer{
    uint vertexWriteHead;
};

layout (scalar, set = 2, binding = 0) restrict readonly buffer HeadGridIn{
    int next_insert_adress_in;
    int head_grid_in[];
};

layout (scalar, set = 2, binding = 1) restrict readonly buffer ParticleMemoryIn{
    Particle particle_memory_in[];
};

float density(vec3 pos){
    float t = uni.time*uni.mesh_gen.time_multiplier+uni.mesh_gen.time_offset;
    float nv = fnoise(vec4(pos,t),uni.mesh_gen.scale,uni.mesh_gen.octaves);
    return clamp(nv * uni.mesh_gen.post_multiplier,0.0,1.0);
}

float sphere(vec3 pos){
//    float d = abs(pos.x - 8) + abs(pos.y - 8) + abs(pos.z - 8);
    float d = distance(pos,vec3(16));
    return 1.0-clamp(d/float(16),0.0,1.0);
}

float density_from_particles(){

    const int padding = 2;
    if(gl_GlobalInvocationID.x < padding ||
       gl_GlobalInvocationID.y < padding ||
       gl_GlobalInvocationID.z < padding ||
       gl_GlobalInvocationID.x >= cUni.side_voxel_count - padding ||
       gl_GlobalInvocationID.y >= cUni.side_voxel_count - padding ||
       gl_GlobalInvocationID.z >= cUni.side_voxel_count - padding){
       return 0.0;
    }

    vec3 pos = vec3(gl_GlobalInvocationID-uvec3(padding)) / float(cUni.side_voxel_count-padding*2-1);
    // get the cell of the particle, needed to find neighbours
    ivec3 cell_pos = min(ivec3(pos * cUni.particle_cells_per_side),ivec3(cUni.particle_cells_per_side-1));

    //cell_pos.y = int(cUni.particle_cells_per_side-0);

//    if(gl_GlobalInvocationID.x == 7 && gl_GlobalInvocationID.z == 7){
//        debugPrintfEXT("Invoc:%03d pos:%f cell:%03d \\n", gl_GlobalInvocationID.y, pos.y, cell_pos.y);
//    }


//    return cell_pos.y > 32 ? 1.0 : 0.0;

    int cell_index = 0;
    uint cell_indices[27];
    uint number_of_valid_cells = 0;

    // find all neigbouring cell indices and write them into array.
    //  this decouples these nested loops from the more lineare compute extensive execution flow for better SM utilisation
    for(int x = -1; x < 2; x++){
        for(int y = -1; y < 2; y++){
            for(int z = -1; z < 2; z++){
                ivec3 current_cell_pos = cell_pos + ivec3(x,y,z);
                if(!(current_cell_pos.x >= 0 &&
                   current_cell_pos.y >= 0 &&
                   current_cell_pos.z >= 0 &&
                   current_cell_pos.x < cUni.particle_cells_per_side &&
                   current_cell_pos.y < cUni.particle_cells_per_side &&
                   current_cell_pos.z < cUni.particle_cells_per_side)){
                    continue;
                }
                uint index = current_cell_pos.z * cUni.particle_cells_per_side*cUni.particle_cells_per_side +
                current_cell_pos.y * cUni.particle_cells_per_side +
                current_cell_pos.x;
                cell_indices[nonuniformEXT(number_of_valid_cells)] = index;
                number_of_valid_cells++;
            }
        }
    }

    const float max_dist = 1.0/128.0;

    float density = max_dist;
    int cell_counter = 0;
    int head = -1;
    // iterate over all neighbours
    while(true){
        // if the cell is empty go to the next one until all neighbours are visited
        if(head == -1){
            if(cell_counter >= number_of_valid_cells){
                break;
            }
            head = head_grid_in[cell_indices[nonuniformEXT(cell_counter)]];
            cell_counter++;
            continue;
        }
        // retrive a neighbour and advance throug the linked list
        Particle neighbour = particle_memory_in[head];
        head = neighbour.next;

        float dist = distance(pos, neighbour.core.pos);

        if(dist < max_dist){
            density = min(dist,density);
        }
    }

    return 1.0 - density/max_dist;
}

float density_from_noise(){
    float density = uni.d.toggles[0] == 1 ? sphere(gl_GlobalInvocationID) : density(gl_GlobalInvocationID);

    if(uni.d.toggles[1] != 1 && (
    gl_GlobalInvocationID.x >= cUni.side_voxel_count-3 ||
    gl_GlobalInvocationID.y >= cUni.side_voxel_count-3 ||
    gl_GlobalInvocationID.z >= cUni.side_voxel_count-3 ||
    gl_GlobalInvocationID.x < 4 ||
    gl_GlobalInvocationID.y < 4 ||
    gl_GlobalInvocationID.z < 4)){
        density = uni.d.toggles[2] == 1 ? 1.0 : 0.0;
    }

    density = gl_GlobalInvocationID.y > 32 ? 1.0 : 0.0;
    return density;
}

void main() {

    if(gl_GlobalInvocationID.x >= cUni.side_voxel_count ||
       gl_GlobalInvocationID.y >= cUni.side_voxel_count ||
       gl_GlobalInvocationID.z >= cUni.side_voxel_count) {
        return;
    }

    uint i = gl_GlobalInvocationID.z * cUni.side_voxel_count*cUni.side_voxel_count +
             gl_GlobalInvocationID.y * cUni.side_voxel_count +
             gl_GlobalInvocationID.x;

    if(i == 0) {
        vertexWriteHead = 0u;
    }

    if(uni.mesh_gen.mesh_from_noise){
        densities[i] = density_from_noise();
    }else{
        densities[i] = density_from_particles();
    }
}