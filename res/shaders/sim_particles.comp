#version 460 core
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_debug_printf : enable

#include "util.glsl"
#include "kernel.glsl"

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout (std430, set = 0, binding = 0) uniform UniformBuffer {
    uniform_data uni;
};

layout (std430, set = 1, binding = 0) uniform ComputeUniformBuffer {
    compute_uniform_data cUni;
};

layout (std430, set = 1, binding = 5) restrict buffer ComputeReturnBuffer {
    compute_return_data dd;
};

layout (scalar, set = 2, binding = 0) restrict readonly buffer HeadGridIn{
    int next_insert_adress_in;
    int head_grid_in[];
};

layout (scalar, set = 2, binding = 1) restrict readonly buffer ParticleMemoryIn{
    Particle particle_memory_in[];
};

layout (scalar, set = 2, binding = 2) restrict writeonly buffer HeadGridOut{ //initialized with -1
    int next_insert_adress_out;
    int head_grid_out[];
};

layout (scalar, set = 2, binding = 3) restrict writeonly buffer ParticleMemoryOut{
    Particle particle_memory_out[];
};

layout (scalar, set = 2, binding = 4) restrict readonly buffer ForceField{
    vec4 force_field[];
};

float particle_mass;

void insertParticle(Particle p){
    p.core.pos /= uni.fluid.distance_multiplier;
    p.core.vel /= uni.fluid.distance_multiplier;

    ivec3 cell_pos = min(ivec3(p.core.pos * cUni.particle_cells_per_side),ivec3(cUni.particle_cells_per_side-1));
    uint index = cell_pos.z * cUni.particle_cells_per_side*cUni.particle_cells_per_side +
    cell_pos.y * cUni.particle_cells_per_side +
    cell_pos.x;

    int insert_address = 1+atomicAdd(next_insert_adress_out,1);
    int last_head = atomicExchange(head_grid_out[index], insert_address);

    p.next = last_head;
    particle_memory_out[insert_address] = p;
}

void integrate(inout CoreParticle p, vec3 force){
    //TODO implement better integrator
    //symplectic Euler
    p.vel.xyz += (force / particle_mass) * uni.sim.step_size;
    p.pos.xyz += p.vel.xyz * uni.sim.step_size;
}

vec3 boundry_force(CoreParticle p){
    vec3 force = vec3(0);

    float h = uni.fluid.kernel_radius;

    vec3 inv_dist_to_border_a = max(1.0 - (p.pos / h), 0.0);
    force += pow(inv_dist_to_border_a,vec3(2.0));

    vec3 inv_dist_to_border_b = max(1.0 - ((uni.fluid.distance_multiplier - p.pos) / h), 0.0);
    force -= pow(inv_dist_to_border_b,vec3(2.0));

    return force;
}

void constaint(inout CoreParticle p) {
//    if(!uni.fluid.apply_constraint){
//        p.pos.x = clamp(p.pos.x,0.0,uni.fluid.distance_multiplier);
//        p.pos.y = clamp(p.pos.y,0.0,uni.fluid.distance_multiplier);
//        p.pos.z = clamp(p.pos.z,0.0,uni.fluid.distance_multiplier);
//        return;
//    }

    vec3 mid_point = vec3(uni.fluid.distance_multiplier*0.5);

    float min_dist = uni.fluid.kernel_radius;

    float k = 0.1;
    float l = 0.0005;

    l *= uni.fluid.distance_multiplier;

    if (p.pos.x < 0.0) {
        p.pos.x = abs(random(vec2(uni.time,length(p.pos))))*l;
        p.vel.x = max(abs(p.vel.x) * k, p.vel.x);
    }
    if (p.pos.y < 0.0) {
        p.pos.y = abs(random(vec2(uni.time,length(p.pos))))*l;
        p.vel.y = max(abs(p.vel.y) * k, p.vel.y);
    }
    if (p.pos.z < 0.0) {
        p.pos.z = abs(random(vec2(uni.time,length(p.pos))))*l;
        p.vel.z = max(abs(p.vel.z) * k, p.vel.z);
    }

    if (p.pos.x > uni.fluid.distance_multiplier) {
        p.pos.x = uni.fluid.distance_multiplier - abs(random(vec2(uni.time,length(p.pos))))*l;
        p.vel.x = min(-abs(p.vel.x) * k, p.vel.x);
    }
    if (p.pos.y > uni.fluid.distance_multiplier) {
        p.pos.y = uni.fluid.distance_multiplier - abs(random(vec2(uni.time,length(p.pos))))*l;
        p.vel.y = min(-abs(p.vel.y) * k, p.vel.y);
    }
    if (p.pos.z > uni.fluid.distance_multiplier) {
        p.pos.z = uni.fluid.distance_multiplier - abs(random(vec2(uni.time,length(p.pos))))*l;
        p.vel.z = min(-abs(p.vel.z) * k, p.vel.z);
    }
}

vec4 sampleForceField(uint frame, vec3 pos) {
    uvec4 o = uvec4(cUni.side_force_field_size * cUni.side_force_field_size, cUni.side_force_field_size, 1,
                          cUni.side_force_field_size * cUni.side_force_field_size * cUni.side_force_field_size);

    vec3 floating_id = clamp(pos / uni.fluid.distance_multiplier, vec3(0), vec3(0.99999)) * (cUni.side_force_field_size - 1);
    vec3 frac = fract(floating_id);
    uvec3 id = uvec3(floating_id);
    uint base_index = o.x * id.x + o.y * id.y + o.z * id.z + frame * o.w;

    return mix(
        mix(
            mix(
                force_field[base_index],
                force_field[base_index+o.z],
                frac.z
            ),
            mix(
                force_field[base_index+o.y],
                force_field[base_index+o.y+o.z],
                frac.z
            ),
            frac.y
        ),
        mix(
            mix(
                force_field[base_index+o.x],
                force_field[base_index+o.x+o.z],
                frac.z
            ),
            mix(
                force_field[base_index+o.x+o.y],
                force_field[base_index+o.x+o.y+o.z],
                frac.z
            ),
            frac.y
        ),
        frac.x
    );
}

vec3 getExternalForce(Particle p) {
    float frac = fract(uni.sim.force_field_animation_index);
    if(frac == 0.0){
        return sampleForceField(int(uni.sim.force_field_animation_index), p.core.pos).xyz * particle_mass;
    }else{
        return mix(
                sampleForceField(0+int(uni.sim.force_field_animation_index), p.core.pos).xyz,
                sampleForceField(1+int(uni.sim.force_field_animation_index), p.core.pos).xyz,
                frac
        ) * particle_mass;
    }

}

float calcPressure(float density) {
    float k = uni.fluid.gas_stiffness;
    float gamma = uni.fluid.gamma;
    float rest_density = uni.fluid.rest_density;

    return max(((k * rest_density) / gamma) * (pow((density / rest_density), gamma) - 1.0), 0.0);
    //return ((k * rest_density) / gamma) * (pow((density / rest_density), gamma) - 1.0);
}

void main() {
    // only simulate existing particles
    if (gl_GlobalInvocationID.x >= next_insert_adress_in + 1)
        return;

    particle_mass = pow(uni.fluid.kernel_radius/2,3.0) * uni.fluid.rest_density;

    // each invocation simulates one particle
    Particle p = particle_memory_in[gl_GlobalInvocationID.x];

    // get the cell of the particle, needed to find neighbours
    ivec3 cell_pos = min(ivec3(p.core.pos * cUni.particle_cells_per_side),ivec3(cUni.particle_cells_per_side-1));

    p.core.pos *= uni.fluid.distance_multiplier;
    p.core.vel *= uni.fluid.distance_multiplier;

    int cell_index = 0;
    uint cell_indices[27];
    uint number_of_valid_cells = 0;

    // find all neigbouring cell indices and write them into array.
    //  this decouples these nested loops from the more lineare compute extensive execution flow for better SM utilisation
    for (int x = -1; x < 2; x++) {
        for (int y = -1; y < 2; y++) {
            for (int z = -1; z < 2; z++) {
                ivec3 current_cell_pos = cell_pos + ivec3(x,y,z);

                if (!(current_cell_pos.x >= 0 &&
                   current_cell_pos.y >= 0 &&
                   current_cell_pos.z >= 0 &&
                   current_cell_pos.x < cUni.particle_cells_per_side &&
                   current_cell_pos.y < cUni.particle_cells_per_side &&
                   current_cell_pos.z < cUni.particle_cells_per_side)) {
                    continue;
                }

                uint index = current_cell_pos.z * cUni.particle_cells_per_side*cUni.particle_cells_per_side +
                             current_cell_pos.y * cUni.particle_cells_per_side +
                             current_cell_pos.x;

                cell_indices[nonuniformEXT(number_of_valid_cells)] = index;
                number_of_valid_cells++;
            }
        }
    }

    // variables needed for the simulation
    vec3 force = vec3(0.0);
    vec3 pressure_gradient = vec3(0.0);
    vec3 viscocity_laplacian = vec3(0.0);
    vec3 surfaceTension = vec3(0.0);

    // for optional density calculation
    float next_density = 0;

    float density_particle = p.core.density;
    float pressure_particle = calcPressure(density_particle);

    float kernel_radius = uni.fluid.kernel_radius;

    int cell_counter = 0;
    int head = -1;

    int neigbour_counter = -1;

    // iterate over all neighbours
    while (true) {
        // if the cell is empty go to the next one until all neighbours are visited
        if (head == -1) {
            if (cell_counter >= number_of_valid_cells) {
                break;
            }
            head = head_grid_in[cell_indices[nonuniformEXT(cell_counter)]];
            cell_counter++;
            continue;
        }
        
        // retrive a neighbour and advance throug the linked list
        Particle neighbour = particle_memory_in[head];
        neighbour.core.pos *= uni.fluid.distance_multiplier;
        neighbour.core.vel *= uni.fluid.distance_multiplier;
        head = neighbour.next;

        vec3 dist_vec = (p.core.pos - neighbour.core.pos);
        float dist = length(dist_vec);

        if (uni.sim.sim_density_from_prev_frame) {
            next_density += kernel(dist, kernel_radius);
        }

        // skip own particle
        if (dist == 0.0) continue;


        float density_neighbour = neighbour.core.density;
        float pressure_neighbour = calcPressure(density_neighbour);

        if(dist <= kernel_radius){
            neigbour_counter++;

            vec3 grad = kernelGradient(dist_vec, kernel_radius);
            pressure_gradient += particle_mass
                * ((pressure_particle / pow(density_particle, 2.0)) + (pressure_neighbour / pow(density_neighbour, 2.0)))
                * grad;

            vec3 velocity_particle = p.core.vel;
            vec3 velocity_neighbour = neighbour.core.vel;
            viscocity_laplacian += (particle_mass / density_neighbour)
                * (velocity_particle - velocity_neighbour) * (dist_vec * grad);
                //* (velocity_particle - velocity_neighbour) * ((dist_vec * grad) / (dist_vec * dist_vec + 0.001 * pow(kernel_radius, 2.0)));

            surfaceTension += dist_vec * kernel(dist, kernel_radius);

        }

    }

    p.debug = vec3(1.0, clamp(50.0, 0.0, 1.0), 0.0);

    // Forces
    if (uni.fluid.apply_ext_force) {
        force += (uni.fluid.ext_force_multiplier * getExternalForce(p));
    }
    if (uni.fluid.fluid_forces) {
        force -= pressure_gradient * particle_mass;

        if (uni.fluid.viscosity_forces) {
            force += particle_mass * uni.fluid.dynamic_viscosity * viscocity_laplacian;
        }

        if (uni.fluid.tension_forces) {
            force += particle_mass * (-uni.fluid.tension_multiplier * surfaceTension);
        }
    }

    if(uni.fluid.apply_constraint){
        force += boundry_force(p.core) * 100.0;
    }

    integrate(p.core,force);


    constaint(p.core);

    if(uni.sim.sim_density_from_prev_frame){
        p.core.density = particle_mass * next_density;
    }

    float debug_density = p.core.density / (2*uni.fluid.rest_density);

    debug_density = clamp(debug_density,0.0,1.0);

    float h = 0.5; // adjust position of middleColor
    vec3 firstColor = vec3(0.0,0.0,1.0);
    vec3 middleColor = vec3(0.0,1.0,0.0); // green
    vec3 endColor = vec3(1.0,0.0,0.0);
    vec3 col = mix(mix(firstColor, middleColor, debug_density/h), mix(middleColor, endColor, (debug_density - h)/(1.0 - h)), step(h, debug_density));

    p.debug = col;

    atomicMax(dd.max_velocity,int(length(p.core.vel)*1000));

    if(length(p.core.vel) * uni.sim.step_size > kernel_radius/2.){
        atomicAdd(dd.speeding_count,1);
    }

    atomicMax(dd.max_neighbour_count,neigbour_counter);
    atomicAdd(dd.cumulative_neighbour_count,neigbour_counter);

    insertParticle(p);
}